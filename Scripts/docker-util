#!/bin/bash

CONTAINERS=(
  homeassistant
  octoprint
  proxy-manager
  wireguard
  wyze-bridge
  adguardhome # intentionally kept last, to avoid DNS issues when downloading containers
)

install-container() {
  case $1 in
    adguardhome)
      IMAGE=adguard/adguardhome:latest
      pull-image $IMAGE && $($2) && return 0
      remove-container $1

      mkdir -p ~/Docker/adguardhome/work
      mkdir -p ~/Docker/adguardhome/conf
      mkdir -p ~/Docker/certs

      docker run -d \
        --name adguardhome \
        --restart unless-stopped \
        -v /home/farmerbb/Docker/adguardhome/work:/opt/adguardhome/work \
        -v /home/farmerbb/Docker/adguardhome/conf:/opt/adguardhome/conf \
        -v /home/farmerbb/Docker/certs:/etc/letsencrypt \
        -p 192.168.86.10:53:53/tcp -p 192.168.86.10:53:53/udp \
        -p 1443:1443/tcp -p 1443:1443/udp \
        -p 853:853/tcp \
        $IMAGE
    ;;

    homeassistant)
      IMAGE=ghcr.io/home-assistant/home-assistant:stable
      pull-image $IMAGE && $($2) && return 0
      remove-container $1

      mkdir -p ~/Docker/homeassistant
      mkdir -p ~/Docker/certs

      docker run -d \
        --name homeassistant \
        --privileged \
        --restart=unless-stopped \
        -e TZ=America/Denver \
        -v /home/farmerbb/Docker/homeassistant:/config \
        -v /home/farmerbb/Docker/certs:/etc/letsencrypt \
        --network=host \
        $IMAGE
    ;;

    octoprint)
      [[ -e /dev/ttyUSB0 ]] && \
        echo "Skipping installation of octoprint container" && \
        return 0

      IMAGE=octoprint/octoprint:latest
      pull-image $IMAGE && $($2) && return 0
      remove-container $1

      docker volume create octoprint

      docker run -d \
        --name octoprint \
        --privileged \
        -v octoprint:/octoprint \
        -v /dev:/dev \
        -p 8080:80 \
        $IMAGE
    ;;

    proxy-manager)
      IMAGE=jc21/nginx-proxy-manager:latest
      pull-image $IMAGE && $($2) && return 0
      remove-container $1

      mkdir -p ~/Docker/proxy-manager

      docker run -d \
        --name=proxy-manager \
        -p 81:81 -p 443:443 -p 3390:3390 -p 5555:5555 \
        -v /home/farmerbb/Docker/proxy-manager:/data \
        -v /home/farmerbb/Docker/certs:/etc/letsencrypt \
        --restart unless-stopped \
        $IMAGE
    ;;

    wireguard)
      [[ $SSH_CONNECTION =~ 10.13.13 ]] && \
        echo "Skipping installation of wireguard container" && \
        return 0

      IMAGE=lscr.io/linuxserver/wireguard:latest
      pull-image $IMAGE && $($2) && return 0
      remove-container $1

      mkdir -p ~/Docker/wireguard

      docker run -d \
        --name=wireguard \
        --cap-add=NET_ADMIN \
        --network=host \
        -e PUID=1000 \
        -e PGID=1000 \
        -e TZ=America/Denver \
        -e SERVERURL=[REDACTED] \
        -e SERVERPORT=[REDACTED] \
        -e PEERS=5 \
        -e PEERDNS=none \
        -e ALLOWEDIPS=10.13.13.0/24,192.168.86.0/24 \
        -e LOG_CONFS=true \
        -v /home/farmerbb/Docker/wireguard:/config \
        --restart unless-stopped \
        $IMAGE
    ;;

    wyze-bridge)
      IMAGE=mrlt8/wyze-bridge:latest
      pull-image $IMAGE && $($2) && return 0
      remove-container $1

      docker run -d \
        --name=wyze-bridge \
        -e WYZE_EMAIL=[REDACTED] \
        -e WYZE_PASSWORD=$(echo [REDACTED] | base64 -d) \
        -e TOTP_KEY=[REDACTED] \
        -e API_ID=[REDACTED] \
        -e API_KEY=[REDACTED] \
        -e WB_API=[REDACTED] \
        -e WB_IP=192.168.86.10 \
        -e WB_USERNAME=farmerbb \
        -e WB_PASSWORD=$(echo [REDACTED] | base64 -d) \
        -e ENABLE_AUDIO=true \
        -p 1935:1935 -p 8554:8554 -p 8888:8888 -p 5000:5000 \
        -p 8889:8889 -p 8189:8189/udp \
        --restart unless-stopped \
        $IMAGE
    ;;
  esac
}

backup-container() {
  case $1 in
    adguardhome)
      rclone-backup adguardhome/conf
    ;;

    homeassistant)
      home-assistant-backup
    ;;

    octoprint)
      BACKUP_PATH=$(docker exec -it octoprint octoprint plugins backup:backup --exclude uploads | tee /dev/stderr | tail -1 | cut -d' ' -f4 | sed 's/'$'\r//')

      rm ~/OneDrive/Other\ Stuff/Docker/octoprint-*
      docker cp octoprint:$BACKUP_PATH ~/OneDrive/Other\ Stuff/Docker/

      docker exec -it octoprint rm $BACKUP_PATH
    ;;

    proxy-manager)
      rclone-backup proxy-manager
    ;;

    wireguard)
      rclone-backup wireguard
    ;;
  esac
}

rclone-backup() {
  sudo rclone \
    --config /home/farmerbb/.config/rclone/rclone.conf \
    sync -v /home/farmerbb/Docker/$1 "OneDrive:Other Stuff/Docker/$1" \
    --exclude="/logs**"
}

pull-image() {
  OLD_ID=$(docker images --quiet $1)
  docker pull $1
  NEW_ID=$(docker images --quiet $1)
  [[ $OLD_ID == $NEW_ID ]] || return 1
}

remove-container() {
  docker stop $1 2&>/dev/null
  docker rm $1 2&>/dev/null
}

wait-for-run() {
  TRIES=0
  until [[ $(docker inspect -f "{{.State.Running}}" $1) == "true" ]]; do
    sleep 1

    ((TRIES++))
    [[ $(($TRIES % 10)) -eq 0 ]] && install-container $1
  done
}

print-usage() {
  BASENAME=$(basename "$0")
  echo -e "\033[1mContainers:\033[0m"
  for i in "${CONTAINERS[@]}"; do echo $i; done
  echo
  echo -e "\033[1mUsage:\033[0m $BASENAME  <install | upgrade | start | remove | wait-for-run | shell | backup>  <container-name | all>"
  exit 1
}

[[ -z $(which docker) ]] && \
  echo "Please run install-docker before running this script." && \
  exit 1

[[ $# -ne 2 ]] && print-usage

if [[ "${CONTAINERS[@]}" =~ $2 || $2 = all ]]; then
  case $1 in
    install)
      if [[ $2 = all ]]; then
        for i in "${CONTAINERS[@]}"; do install-container $i false; done
      else
        install-container $2 false
      fi
      exit 0
    ;;

    upgrade)
      if [[ $2 = all ]]; then
        for i in "${CONTAINERS[@]}"; do install-container $i true; done
      else
        install-container $2 true
      fi
      exit 0
    ;;

    start)
      if [[ $2 = all ]]; then
        for i in "${CONTAINERS[@]}"; do docker start $i; done
      else
        docker start $2
      fi
      exit 0
    ;;

    remove)
      if [[ $2 = all ]]; then
        printf "Press Enter if you really want to remove all containers, or CTRL+C to abort..."
        read _

        for i in "${CONTAINERS[@]}"; do remove-container $i; done
      else
        remove-container $2
      fi

      sudo docker system prune --volumes -a -f
      exit 0
    ;;

    wait-for-run)
      if [[ $2 = all ]]; then
        for i in "${CONTAINERS[@]}"; do wait-for-run $i; done
      else
        wait-for-run $2
      fi
      exit 0
    ;;

    shell)
      if [[ $2 = all ]]; then
        echo '"shell" is not valid when used with "all", aborting...'
        exit 1
      fi

      docker exec -it $2 bash || docker exec -it $2 sh
      exit 0
    ;;

    backup)
      if [[ $2 = all ]]; then
        for i in "${CONTAINERS[@]}"; do backup-container $i; done
      else
        backup-container $2
      fi
      exit 0
    ;;

    *)
      print-usage
    ;;
  esac
fi

print-usage
