#!/bin/bash

CONTAINERS=(
  adguardhome
  homeassistant
  octoprint
  proxy-manager
  wireguard
  wyze-bridge
)

install-containers() {
  echo password=$(echo [REDACTED] | base64 -d) > ~/Docker/.env
  cp ~/Other\ Stuff/Docker/docker-compose.yml ~/Docker/docker-compose.yml
  docker compose -f ~/Docker/docker-compose.yml up -d
}

backup-container() {
  case $1 in
    adguardhome)
      rclone-backup adguardhome/conf
    ;;

    homeassistant)
      home-assistant-backup
    ;;

    octoprint)
      BACKUP_PATH=$(docker exec -it octoprint octoprint plugins backup:backup | tee /dev/stderr | tail -1 | cut -d' ' -f4 | sed 's/'$'\r//')

      rm ~/OneDrive/Other\ Stuff/Docker/octoprint-*
      docker cp octoprint:$BACKUP_PATH ~/OneDrive/Other\ Stuff/Docker/

      docker exec -it octoprint rm $BACKUP_PATH
    ;;

    proxy-manager)
      rclone-backup proxy-manager
    ;;

    wireguard)
      rclone-backup wireguard
    ;;
  esac
}

rclone-backup() {
  sudo rclone \
    --config /home/farmerbb/.config/rclone/rclone.conf \
    sync -v /home/farmerbb/Docker/$1 "OneDrive:Other Stuff/Docker/$1" \
    --exclude="/logs**"
}

backup-yml() {
  for i in OneDrive/Other\ Stuff/Docker Other\ Stuff/Docker; do
    cp ~/Docker/docker-compose.yml "/home/farmerbb/$i/docker-compose.yml"
  done
}

wait-for-run() {
  TRIES=0
  until [[ $(docker inspect -f "{{.State.Running}}" $1) == "true" ]]; do
    sleep 1

    ((TRIES++))
    [[ $(($TRIES % 10)) -eq 0 ]] && install-container $1
  done
}

print-usage() {
  BASENAME=$(basename "$0")
  echo -e "\033[1mContainers:\033[0m"
  for i in "${CONTAINERS[@]}"; do echo $i; done
  echo
  echo -e "\033[1mUsage:\033[0m $BASENAME  <install | backup | shell | wait-for-run>  <container-name | all>"
  exit 1
}

[[ -z $(which docker) ]] && \
  echo "Please run install-docker before running this script." && \
  exit 1

[[ $# -ne 2 ]] && print-usage

if [[ "${CONTAINERS[@]}" =~ $2 || $2 = all ]]; then
  case $1 in
    install)
      if [[ $2 = all ]]; then
        install-containers
        exit 0
      fi

      echo "Installing individual containers is no longer supported"
      exit 1
    ;;

    wait-for-run)
      if [[ $2 = all ]]; then
        for i in "${CONTAINERS[@]}"; do wait-for-run $i; done
      else
        wait-for-run $2
      fi
      exit 0
    ;;

    shell)
      if [[ $2 = all ]]; then
        echo '"shell" is not valid when used with "all", aborting...'
        exit 1
      fi

      docker exec -it $2 bash || docker exec -it $2 sh
      exit 0
    ;;

    backup)
      if [[ $2 = all ]]; then
        for i in "${CONTAINERS[@]}"; do backup-container $i; done
      else
        backup-container $2
      fi

    # rclone-backup certs
      backup-yml
      exit 0
    ;;

    *)
      print-usage
    ;;
  esac
fi

print-usage
